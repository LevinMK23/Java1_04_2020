package geekbrains.lession0;

import java.util.Scanner;

class GameXO {
    enum Type {
        X, O, DEFAULT
    }

    private final static Type empty = Type.DEFAULT;

    private final static char EMPTY = '_';
    private final static char DOT_X = 'X';
    private final static char DOT_O = 'O';

    private static void playAgain(char[][] map) {
        System.out.println("SIGRAT ECHE RAZ?");
        System.out.println("1-YES,2-NO");
        Scanner in = new Scanner(System.in);
        int c = in.nextInt();

        if (c == 2) {
            System.exit(0);
        }
        if (c != 1 && c != 2)
            playAgain(map);
        if (c == 1) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    map[i][j] = EMPTY;
                }
            }
            start();
        }
    }

    public static void main(String[] args) {
        start();
    }

    public static void start() {
        char[][] map = getInitMap(3);
        System.out.println("Приветствую вас в игре Крестики Нолики!");
        System.out.println("Перед вами поле:");
        printMap(map);
        System.out.println("Вы играете Крестиками!");
        System.out.println("Чтобы сделать ход, введите номер строки и номер столбца на поле:");
        Scanner in = new Scanner(System.in);
        while (true) {
            System.out.println("Ваш ход:");
            int y = in.nextInt(), x = in.nextInt();
            if (isCellValid(map, x, y)) {
                humanTurn(map, x, y);
                printMap(map);
                if (nichya(map)) {
                    System.out.println("Nichya");
                    playAgain(map);
                }
                if (checkVictory(map, DOT_X)) {
                    System.out.println("Вы победили");
                    playAgain(map);
                }
                System.out.println("Ход компьютера:");
                robotTurn(map);
                if (checkVictory(map, DOT_O)) {
                    printMap(map);
                    System.out.println("Вы проиграли");
                    playAgain(map);
                }
                printMap(map);
            } else {
                System.out.println("Введены некорректные данные! Введите еще раз");
                System.out.println("Введите первое число-номер столбца(1-3)");
                System.out.println("Затем введите второе число-номер строки(1-3)");
                System.out.println("Это поле должно быть свободно");
            }
        }
    }

    private static boolean nichya(char[][] map) {
        int size = map.length;
        int countMax = size * size;
        for (int count = 0; count < countMax; count++) {
            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    if (map[i][j] == EMPTY) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    private static void robotTurn(char[][] map) {
        // TODO: 14.04.2020 random
        int size = map.length;
        while (true) {
            int i = (int) (Math.random() * size);
            int j = (int) (Math.random() * size);
            if (map[i][j] == EMPTY) {
                map[i][j] = DOT_O;
                break;
            }
        }
    }


    public static char[][] getInitMap(int size) {
        char[][] map = new char[size][size];
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                map[i][j] = EMPTY;
            }
        }
        return map;
    }

    public static void printMap(char[][] map) {
        int size = map.length;
        for (char[] chars : map) {
            for (char sym : chars) {
                System.out.print("|" + sym);
            }
            System.out.println("|");
        }
    }

    public static void humanTurn(char[][] map, int x, int y) {
        x--;
        y--;
        map[x][y] = DOT_X;
    }

    private static boolean isCellValid(char[][] map, int x, int y) {
        x--;
        y--;
        int size = map.length;
        if (x >= 0 && x < size && y >= 0 && y < size) {
            return map[x][y] == EMPTY;
        }
        return false;
    }

    private static boolean checkVictory(char[][] map, char dotX) {
        // TODO: 14.04.2020
        if (map[1][1] == dotX) {
            if (map[0][0] == dotX && map[2][2] == dotX) {
                return true;
            }
            if (map[1][0] == dotX && map[1][2] == dotX) {
                return true;
            }
            if (map[0][1] == dotX && map[2][1] == dotX) {
                return true;
            }
            if (map[0][2] == dotX && map[2][0] == dotX) {
                return true;
            }
        }
        if (map[0][0] == dotX && map[0][1] == dotX && map[0][2] == dotX) {
            return true;
        }
        if (map[2][0] == dotX && map[2][1] == dotX && map[2][2] == dotX) {
            return true;
        }
        if (map[0][0] == dotX && map[1][0] == dotX && map[2][0] == dotX) {
            return true;
        }
        if (map[0][2] == dotX && map[1][2] == dotX && map[2][2] == dotX) {
            return true;
        }
        return false;

    }
}