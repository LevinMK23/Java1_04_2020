package Lesson2;

import jdk.jshell.execution.Util;

import javax.swing.*;

public class Lesson2 {
    //1. Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ].
// С помощью цикла и условия заменить 0 на 1, 1 на 0;
    public static void main(String[] args) {

      int[] array = {1, 1, 0, 0, 1, 0, 1, 1, 0, 0};
            for (int i  = 0; i < array.length; i++) {
                int s = array[i] = (array[i] == 1) ? 0 : 1;
                System.out.print(s);
        }


        //2. Задать пустой целочисленный массив размером 8. С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21;
        int[] array = new int[8];
            for (int i = 0; i < array.length; i++) {
               int s = i * 3;
               System.out.print(s);
        }



//3/ Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6 умножить на 2;

        int[] array = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
            for (int i = 0; i < array.length; i++){
                array[i] = (array[i] < 6) ? (array[i] * 2) : array[i];
                System.out.print(array[i]);
                }


//4. Создать квадратный двумерный целочисленный массив (количество строк и столбцов одинаковое),
// с помощью цикла(-ов) заполнить его диагональные элементы единицами;

        int[][] array = new int[4][4];
        for (int i = 0; i < array.length; i++) {
            for (int j = 0, j2 = array[i].length; j < array[i].length; j++, j2--) {
                if (i == j || i == (j2 - 1)) array[i][j] = 1;
                System.out.print(array[i][j] + " ");
            }
            System.out.print("\r\n");
        }


//5. ** Задать одномерный массив и найти в нем минимальный и максимальный элементы (без помощи интернета);

        int[] array = {4, -100, -3, 3, 9, 5, -6, 8, 100};
            int i = 0;
            int max = 0;
            int min = 0;
            for (i = 0; i < array.length; i++){
                if(i == 0){
                    max = array[i];
                    min = array[i];
                }else{
                    max = (array[i] > max) ? array[i] : max;
                    min = (array[i] < min) ? array[i] : min;
                }

            }
        System.out.println(max);
        System.out.println(min);

    }
}
//6. ** Написать метод, в который передается не пустой одномерный целочисленный массив,
// метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части массива равны.
// Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, checkBalance([1, 1, 1, || 2, 1]) → true, граница
// показана символами ||, эти символы в массив не входят.


// 7. **** Написать метод, которому на вход подается одномерный массив и число n
// (может быть положительным, или отрицательным), при этом метод
// должен сместить все элементымассива на n позиций. Для усложнения задачи
// нельзя пользоваться вспомогательными массивами.